.\" Text automatically generated by md2man 
.TH tmww-server 1 "October 11, 2014" "Linux" "Linux Reference Manual"
.SH NAME
\fBserver.plugin \fP- server text databases operation
.PP
.PP
.SH USAGE
.TP
.B
subcommand: char -- character database handler
.PP
.PP
.nf
.fam C
    grep [ chars | ids | pcids ] REGEXP -- search known names, output names/names with ids
    fuzzy [ chars | ids | pcids ] PATTERN -- case-insensitive levenshtein distance 1 search
    agrep [ -e ERRORS ] [ chars | ids | pcids ] PATTERN -- approximate grep with max ERRORS
    [-cnar] [-f EXPR] [-s NUM] get { CHAR | [ skills | inventory | vars | id | char | accs | db | FIELD+ ]
        by { char CHAR | pcid PCID } }
    [-cnar] [-f EXPR] [-s NUM] show { CHAR | [ parties | storage | vars | ids | chars | accs | db | FIELD+ ]
        by { char CHAR | id ID | pcid PCID } }
    dig REGEXP -- grep + show pcids by ids from grep matches
    summary [ SUMMARY ] by { char CHAR | id ID | pcid PCID }
.fam T
.fi
.PP
.TP
.B
subcommand: party -- party database handler
.PP
.PP
.nf
.fam C
    get { CHAR | by { char CHAR | pcid PCID } }
    [-cnar] [-f EXPR] [-s NUM] show { CHAR | [ ids | chars | players | accs | db | FIELD+ ]
        by { char CHAR | party PARTY | player PLAYER | pcid PCID } }
    { grep | fuzzy | agrep [ -e ERRORS ] } PATTERN -- grep/approximate grep party name
    dig PATTERN -- grep + show ids/charname of party members
.fam T
.fi
.PP
.TP
.B
subcommand: player -- players database handler
.PP
.PP
.nf
.fam C
    ref -- field types quick reference
    create PLAYER
    remove PLAYER
    rename PLAYER to PLAYER
    add PLAYER FIELD value VALUE
    add PLAYER FIELD element VALUE -- adding alts will automatically resolve charname into account
    resolve PLAYER -- resolve all player alts into accounts
    del PLAYER FIELD
    del PLAYER FIELD element VALUE
    [-cnar] [-f EXPR] [-s NUM] get { CHAR | by { char CHAR | id ACCID | pcid PCID } }
    [-cnar] [-f EXPR] [-s NUM] show { PLAYER | [ ids | chars | parties | accs | db | FIELD+ ]
        by { char CHAR | id ID | pcid PCID } }
    summary [ SUMMARY ] by { char CHAR | id ID | player PLAYER | pcid PCID }
    list with FIELD
    list with { FIELD [ not ] as VALUE | VALUE [ not ] in FIELD }+
    dump PLAYER -- dump JSONline record of PLAYER; tmww player dump veryape
    record NUMBER -- access players db record by it's order number
    append STRING -- NOT SAFE append JSON player record of same format as with dump operation to end of dbplayers
        you should try sanitize operation if you not sure if there are duplicate entries or fields
    keys PLAYER -- tmww player keys veryape
    field PLAYER FIELD [FIELD]\.\.\. -- tmww player field veryape name aka
    search STRING -- simple search in all fields
    sanitize -- remove keys with 0 length - empty arrays and hashes with null value
        resolve alts into accounts, report duplicate accounts and alts
    lregen -- regenerate shortened playerdb version if limiteddb is in use
    FIXME merge FILENAME -- simple merge player records + sanitize
    FIXME force-merge FILENAME -- replace duplicated records with new ones + sanitize
.fam T
.fi
.PP
.PP
subcommand: select -- search inventory/storage
.PP
.PP
.nf
.fam C
    select [-incs] by { ids ITEMID+ | names ITEMNAME+ | re REGEXP | itemsets GLOB+ }
.fam T
.fi
.PP
.PP
.SH GLOSSARY
Further text operates next terms:
.PP
.TP
.B
accid, id, accname
\fIaccid\fP or just \fIid\fP - account ID - first field in server account.txt. Same
is referenced by athena scripting guide as _rid_. Accid has corresponding
accname which is second field from account.txt and entered in client login
field. In game player see other player entities with account ID (which
explaines delayed rename if player relogs with other character on same
account).
.TP
.B
pcid
player character ID - first field from athena.txt; unique for each char;
changes in case character was deleted and recreated on same account with
same charname. Used in map-server logs
.TP
.B
partyname, partyid
server side athena.txt reference characters party by numeric id, party
names are stored in party.txt
.TP
.B
account.txt
default "login/save/account.txt"; contains mail, registration date and so on;
referenced as "ACCOUNTS" file
.TP
.B
athena.txt
default "world/save/athena.txt"; contain snapshot of character states -
stats, inventory, pcids, etc.; referenced as "SAVE" or just "DB" file
.PP
.PP
Doing lookup on map log server.plugin converts:
.PP
.PP
.nf
.fam C
    player (dbplayers.jsonl) -> accids -> charnames (dbchars.txt) ->
        pcids (athena.txt)
.fam T
.fi
.PP
.PP
.SH DESCRIPTION
Short comparison to alts.plugin:
.PP
.SS alts.plugin
.TP
.B
terms
accid, partyname, charname, playername
.PP
.TP
.B
operations
.PP
.PP
.nf
.fam C
    char { add | resolve | sanitize | merge | get | show | grep | agrep | fuzzy | dig }
    party { add | sanitize | merge | get | show | grep | agrep | fuzzy }
    player { create | remove | rename | ref | add | resolve | del |
        get | show | list | dump | record | append | keys | field | search |
        sanitize | lregen | merge | forcemerge }
.fam T
.fi
.PP
.SS server.plugin
.TP
.B
terms
accid, pcid, partyname, partyid, charname, playername, db, accs, vars
.PP
.TP
.B
operations
.PP
.PP
.nf
.fam C
    char { get | show | grep | agrep | fuzzy | dig | summary }
    party { get | show | grep | agrep | fuzzy | summary }
    player { create | remove | rename | ref | add | resolve | del |
        get | show | list | dump | record | append | keys | field | search |
        sanitize | lregen | merge | forcemerge | summary }
.fam T
.fi
.PP
.PP
Aside of "show { ids | parties | players }" there are new "pcids" which are
first column values from athena.txt, "db" which is athena.txt itself formatted
with possible header, "accs" which means lines from account.txt, "vars" -
script variables per char/account.
.PP
.PP
As with alts.plugin "char get" used for operations on char, "char show" - to
get chars on accounts, "party show" - to get chars in same party and "player
show" to get all chars associated with player alias.
.PP
.PP
.nf
.fam C
    char [ opts ] get { CHAR | [ skills | inventory | vars | id | char | accs | db | FIELD+ ]
        by { char CHAR | pcid PCID } }
    char [ opts ] show { CHAR | [ parties | storage | vars | ids | chars | accs | db | FIELD+ ]
        by { char CHAR | id ID | pcid PCID } }
    party get { CHAR | by { char CHAR | pcid PCID } }
    party [ opts ] show { CHAR | [ ids | chars | players | accs | db | FIELD+ ]
        by { char CHAR | party PARTY | player PLAYER | pcid PCID } }
    player [ opts ] get { CHAR | by { char CHAR | id ACCID | pcid PCID } }
    player [ opts ] show { PLAYER | [ ids | chars | parties | accs | db | FIELD+ ]
        by { char CHAR | id ID | pcid PCID } }
.fam T
.fi
.PP
.PP
"char get" is used to perform most inventory-related searches.
.PP
.PP
"opts" touch only operations with fields like "show { db | accs }".
.PP
.TP
.B
\fB-c\fP
field captions for custom fields (with FIELDS query)
.TP
.B
\fB-n\fP
suppress append accid/charname as last column in db/accs filter
.TP
.B
\fB-a\fP
suppress per-char fields and leave only per-account
.TP
.B
\fB-r\fP
output raw tab-separated fields without pretty-printing
.TP
.B
\fB-f\fP EXPR
override cut fields, EXPR passed as "cut \fB-f\fP" argument value
.TP
.B
\fB-s\fP NUM
use backup suffix for all server files; for individual suffix define vars in shell
.PP
.PP
Output fields names for db/accs could be customized in config sections
"fieldsdb", "fieldsaccs", "fieldsvars" and "serverfieldsalias". There are few
hardcoded field names:
.PP
.TP
.B
party
lookup of party name
.TP
.B
player
lookup player name
.PP
.PP
"accs" fields output information per account (accid), "db" - per charname. "db"
may be omitted when listing fields defined in fieldsdb.
.PP
.PP
"inventory", "storage" and "summary" output described in aliases with "server_"
prefix like "server_inventory" in section "itemfieldsalias"; see \fBtmww-db\fP(1) for
details. Column "count" shows item count.
.PP
.SS Operation "summary"
"summary" operation always tries first player alias then chars on account and
performs few built-in calculations:
.PP
.PP
.nf
.fam C
    char summary [ SUMMARY ] by { char CHAR | id ID | pcid PCID }
    player summary [ SUMMARY ] by { char CHAR | id ID | player PLAYER | pcid PCID }
.fam T
.fi
.PP
.PP
Standart SUMMARY filters include:
.PP
.TP
.B
gp (default)
for all chars summary += gp on chars and storages per account
.TP
.B
bp
for all chars summary += bp
.TP
.B
exp
for all chars summary += lvltable[level] + exp
.TP
.B
items
for all chars sum up inventory and storage items
.PP
.PP
Output of gp/bp/exp filters are single integer.
.PP
.PP
Output format of "summary items" controlled by "server_summary" alias in
"itemfieldsalias" section.
.PP
.SS Subcommand "select"
.nf
.fam C
    select [ OPTS ] by { ids ITEMID+ | names ITEMNAME+ | re REGEXP | itemsets GLOB+ }
.fam T
.fi
.PP
.PP
Arguments to "itemset" are series of itemset names or quoted glob patterns
matching itemsets.
.PP
.PP
Options:
.PP
.TP
.B
\fB-i\fP
include matched item ids
.TP
.B
\fB-n\fP
include matched item names
.TP
.B
\fB-c\fP
suppress player resolution (only per account info)
.TP
.B
\fB-s\fP
single line output (don't split inventory/storage and match lines)
.PP
.PP
"select" searches inventory/storage. Example output:
.PP
.PP
.nf
.fam C
    storage of "aaasdsad"; 0123123: bbbb, cccc
    match: ScarabArmlet (621)
    inventory of "aaasadsad"; playerdb alias: asdf, 10 known accounts; 0123123: aaaa
    match: ScarabArmlet (585), Eyepatch (621)
.fam T
.fi
.PP
.PP
Result may be grepped with "\fB-A\fP 1" or "\fB-B\fP 1" options. Further lookup may be done
with "player/char summary items". See details on item query in \fBtmww-db\fP(1).
.PP
.PP
.SH FORMAT
.SS athena.txt
.nf
.fam C
    pcid <tab> accid,slot <tab> charname <tab> ?,level,magicklevel? <tab>
        exp,job,zeny <tab> hp,hpmax,mp,mpmax <tab> str,agi,vit,int,dex,luk
        <tab> ?,? <tab> ?,?,? <tab> partyid,?,? <tab> ?,?,? <tab> ?,?,?,?,?
        <tab> map,x,y <tab> respmap,x,y,? <tab> ?????? <tab> inventory
.fam T
.fi
.PP
.SS account.xt
.nf
.fam C
    accid <tab> accname <tab> pwd_hash <tab> date time.usec <tab> gender
        <tab> login_counter <tab> ? <tab> mail <tab> ? <tab> ? <tab> lastip
        <tab> ? <tab> ?
.fam T
.fi
.PP
.PP
.SH CONFIG
WARNING: there's no default value for SERVERPATH
.PP
.TP
.B
SERVERPATH : string : \fIempty\fP
server installation path
.TP
.B
SERVERSKILLDB : string : $SERVERPATH/world/map/db/skill_db.txt
location of skills description file
.TP
.B
SERVERATHENA : string : $SERVERPATH/world/save/athena.txt
location of athena.txt
.TP
.B
SERVERACCOUNT : string : $SERVERPATH/login/save/account.txt
location of account.txt
.TP
.B
SERVERGM : string : $SERVERPATH/login/save/gm_account.txt
location of gm_account.txt
.TP
.B
SERVERACCREG : string : $SERVERPATH/world/save/accreg.txt
location of accreg.txt
.TP
.B
SERVERPARTY : string : $SERVERPATH/world/save/party.txt
location of party.txt
.TP
.B
SERVERSTORAGE : string : $SERVERPATH/world/save/storage.txt
location of storage.txt
.PP
.PP
.SH SECTIONS
Lines starting with "#" are comments.
.PP
.SS Section "fieldsdb"
.nf
.fam C
    FIELD CSVFIELD FNAME
.fam T
.fi
.PP
.PP
Line describes how to cut data: FIELD is field number in tab-separated data,
CSVFIELD is field number in comma-separated data within obtained chunk (or
"1"). Prepared data can be referenced as "FNAME" in filter expressions like
"char show".
.PP
.PP
Server plugin comes with set of default fields, see source for details.
.PP
.SS Section "fieldsaccs"
Format is same as for fieldsdb section.
.PP
.SS Section "fieldsreg"
.nf
.fam C
    ALIAS NAME
.fam T
.fi
.PP
.PP
Defaults example:
.PP
.PP
.nf
.fam C
    fieldsaccreg {
        sgp #BankAccount
    }
.fam T
.fi
.PP
.SS Section "serverfieldsalias"
.nf
.fam C
    ALIAS FIELD+
.fam T
.fi
.PP
.PP
Aliases are processed recursively (some older shells have artificial recursion
limit of ~128 calls); repeated fnames/aliases are simply ignored.
.PP
.PP
Defaults example:
.PP
.PP
.nf
.fam C
    serverfieldsalias {
        q1 login mail lvl gp sgp lastip gender
    }
.fam T
.fi
.PP
.PP
.SH EXAMPLE
.nf
.fam C
    # show char mail
    $ tcs accs login mail by char Cody
.fam T
.fi
.PP
.PP
.nf
.fam C
    # show player chars pcids and slot
    $ tps pcid slot by player laguna
.fam T
.fi
.PP
.PP
.nf
.fam C
    # show storage and carried gp for chars in party
    $ tgs lvl by party 'Witch house'
.fam T
.fi
.PP
.PP
.nf
.fam C
    # show all gp owned by players within party
    $ tmww party summary gp by party 'some rogue party'
.fam T
.fi
.PP
.PP
.SH NOTES
.SS Sort by column
Raw output flag is used for it. Example sort by two fields:
.PP
.PP
.nf
.fam C
    tp -cr show lvl PC_DIE_COUNTER by player lycan | sort -rnk1,2 | column -ts $'\t'
.fam T
.fi
.PP
.PP
Default output is sorted by account IDs only.
.PP
.SS Rank known players/left accounts by gp
.nf
.fam C
    rank_by_gp() {
        ids=$( mktemp )
        tp nlist with player | while read player; do
            tp ids ${player} >> "${ids}"
            tp summary gp by player ${player}
        done | sort -nr
        athena=$( tmww -g SERVERATHENA )
        aids=$( mktemp )
        cut -f 2 "${athena}" | cut -d ',' -f 1 > "${aids}"
        sort -n "${ids}" | uniq |
            comm --nocheck-order -23 "${aids}" - |
            while read id; do
                tc summary gp by id ${id}
            done | sort -nr
    }
.fam T
.fi
.PP
.PP
This way you may spot wealthy not-yet-associated aaccounts.
Same ranking may be done for other summary filters, e.g. exp and bp.
.PP
.PP
.SH COPYRIGHT
This document is part of tmww - The Mana World Watcher scripts.
.PP
.PP
Licensed under terms of GNU General Public License version 3. For full text of
license see COPYING file distributed with tmww.
.PP
.PP
.SH AUTHORS
willee <v4r@trioptimum.com>, 2012-2014
.PP
.PP
.SH SEE ALSO
\fBtmww\fP(1), \fBtmww-config\fP(5), \fBtmww-alts\fP(1), \fBtmww-db\fP(1)
.PP
